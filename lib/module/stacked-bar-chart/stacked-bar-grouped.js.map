{"version":3,"sources":["stacked-bar-grouped.js"],"names":["StackedBarGrouped","width","height","event","nativeEvent","layout","setState","domain","props","horizontal","contentInset","left","right","spacingInner","spacingOuter","state","scale","scaleLinear","range","scaleBand","paddingInner","paddingOuter","top","bottom","x","y","series","colors","keys","data","areas","barWidth","bandwidth","length","map","stack","stackIndex","serie","keyIndex","entry","entryIndex","path","shape","area","x0","d","x1","_index","defined","isNaN","color","key","y0","y1","array","merge","values","gridMax","gridMin","mergedValues","extent","_","index","offset","order","valueAccessor","obj","value","item","animate","animationDuration","style","numberOfTicks","children","getSeries","indexes","calcIndexes","calcExtent","ticks","xDomain","yDomain","calcXScale","calcYScale","stacks","calcAreas","extraProps","flex","_onLayout","React","Children","child","belowChart","cloneElement","indexStack","areaIndex","bar","indexArea","svg","PureComponent","propTypes","PropTypes","arrayOf","object","string","isRequired","func","any","number","bool","defaultProps","stackOffsetNone","stackOrderNone","showZeroAxis","showGrid"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react';\nimport {View} from 'react-native';\nimport PropTypes from 'prop-types';\nimport Svg from 'react-native-svg';\nimport * as array from 'd3-array';\nimport * as scale from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport Path from '../animated-path';\n\nclass StackedBarGrouped extends PureComponent {\n  state = {\n    width: 0,\n    height: 0,\n  };\n\n  _onLayout(event) {\n    const {\n      nativeEvent: {\n        layout: {height, width},\n      },\n    } = event;\n    this.setState({height, width});\n  }\n\n  calcXScale(domain) {\n    const {\n      horizontal,\n      contentInset: {left = 0, right = 0},\n      spacingInner,\n      spacingOuter,\n    } = this.props;\n\n    const {width} = this.state;\n\n    if (horizontal) {\n      return scale\n        .scaleLinear()\n        .domain(domain)\n        .range([left, width - right]);\n    }\n\n    return scale\n      .scaleBand()\n      .domain(domain)\n      .range([left, width - right])\n      .paddingInner([spacingInner])\n      .paddingOuter([spacingOuter]);\n  }\n\n  calcYScale(domain) {\n    const {\n      horizontal,\n      contentInset: {top = 0, bottom = 0},\n      spacingInner,\n      spacingOuter,\n    } = this.props;\n\n    const {height} = this.state;\n\n    if (horizontal) {\n      return scale\n        .scaleBand()\n        .domain(domain)\n        .range([top, height - bottom])\n        .paddingInner([spacingInner])\n        .paddingOuter([spacingOuter]);\n    }\n\n    return scale\n      .scaleLinear()\n      .domain(domain)\n      .range([height - bottom, top]);\n  }\n\n  calcAreas(x, y, series) {\n    const {horizontal, colors, keys, data} = this.props;\n    let areas;\n    let barWidth;\n\n    if (horizontal) {\n      barWidth = y.bandwidth() / data.length;\n\n      areas = series.map((stack, stackIndex) => {\n        return stack.map((serie, keyIndex) => {\n          return serie.map((entry, entryIndex) => {\n            const path = shape\n              .area()\n              .x0((d) => x(d[0]))\n              .x1((d) => x(d[1]))\n              .y((d, _index) =>\n                _index === 0\n                  ? y(entryIndex) + barWidth * stackIndex\n                  : y(entryIndex) + barWidth + barWidth * stackIndex,\n              )\n              .defined((d) => !isNaN(d[0]) && !isNaN(d[1]))([entry, entry]);\n\n            return {\n              path,\n              color: colors[stackIndex][keyIndex],\n              key: keys[stackIndex][keyIndex],\n            };\n          });\n        });\n      });\n    } else {\n      barWidth = x.bandwidth() / data.length;\n\n      areas = series.map((stack, stackIndex) => {\n        return stack.map((serie, keyIndex) => {\n          return serie.map((entry, entryIndex) => {\n            const path = shape\n              .area()\n              .y0((d) => y(d[0]))\n              .y1((d) => y(d[1]))\n              .x((d, _index) =>\n                _index === 0\n                  ? x(entryIndex) + barWidth * stackIndex\n                  : x(entryIndex) + barWidth + barWidth * stackIndex,\n              )\n              .defined((d) => !isNaN(d[0]) && !isNaN(d[1]))([entry, entry]);\n\n            return {\n              path,\n              color: colors[stackIndex][keyIndex],\n              key: keys[stackIndex][keyIndex],\n            };\n          });\n        });\n      });\n    }\n\n    return array.merge(areas);\n  }\n\n  calcExtent(values) {\n    const {gridMax, gridMin} = this.props;\n\n    // One more merge for stacked groups\n    const mergedValues = array.merge(values);\n\n    return array.extent([...mergedValues, gridMin, gridMax]);\n  }\n\n  calcIndexes() {\n    const {data} = this.props;\n\n    // Must return an array with indexes for the number of groups to be shown\n    return data[0].data.map((_, index) => index);\n  }\n\n  getSeries() {\n    const {data, keys, offset, order, valueAccessor} = this.props;\n\n    return data.map((obj, index) =>\n      shape\n        .stack()\n        .keys(keys[index])\n        .value((item, key) => valueAccessor({item, key}))\n        .order(order)\n        .offset(offset)(obj.data),\n    );\n  }\n\n  render() {\n    const {\n      data,\n      animate,\n      animationDuration,\n      style,\n      numberOfTicks,\n      children,\n      horizontal,\n    } = this.props;\n\n    const {height, width} = this.state;\n\n    if (data.length === 0) {\n      return <View style={style} />;\n    }\n\n    const series = this.getSeries();\n\n    //double merge arrays to extract just the values\n    const values = array.merge(array.merge(series));\n    const indexes = this.calcIndexes(values);\n\n    const extent = this.calcExtent(values);\n    const ticks = array.ticks(extent[0], extent[1], numberOfTicks);\n\n    const xDomain = horizontal ? extent : indexes;\n    const yDomain = horizontal ? indexes : extent;\n\n    const x = this.calcXScale(xDomain);\n    const y = this.calcYScale(yDomain);\n\n    const bandwidth = horizontal ? y.bandwidth() : x.bandwidth();\n\n    const stacks = this.calcAreas(x, y, series);\n\n    const extraProps = {\n      x,\n      y,\n      width,\n      height,\n      ticks,\n      data,\n      bandwidth,\n    };\n\n    return (\n      <View style={style}>\n        <View style={{flex: 1}} onLayout={(event) => this._onLayout(event)}>\n          {height > 0 && width > 0 && (\n            <Svg style={{height, width}}>\n              {React.Children.map(children, (child) => {\n                if (child && child.props.belowChart) {\n                  return React.cloneElement(child, extraProps);\n                }\n                return null;\n              })}\n              {stacks.map((areas, indexStack) => {\n                const areaIndex = indexStack % data.length;\n\n                return areas.map((bar, indexArea) => {\n                  const keyIndex = indexArea % data[areaIndex].data.length;\n                  const key = `${areaIndex}-${keyIndex}-${bar.key}`;\n\n                  const {svg} = data[areaIndex].data[keyIndex][bar.key];\n\n                  return (\n                    <Path\n                      key={key}\n                      fill={bar.color}\n                      {...svg}\n                      d={bar.path}\n                      animate={animate}\n                      animationDuration={animationDuration}\n                    />\n                  );\n                });\n              })}\n              {React.Children.map(children, (child) => {\n                if (child && !child.props.belowChart) {\n                  return React.cloneElement(child, extraProps);\n                }\n                return null;\n              })}\n            </Svg>\n          )}\n        </View>\n      </View>\n    );\n  }\n}\n\nStackedBarGrouped.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n  keys: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)).isRequired,\n  colors: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)).isRequired,\n  offset: PropTypes.func,\n  order: PropTypes.func,\n  style: PropTypes.any,\n  spacingInner: PropTypes.number,\n  spacingOuter: PropTypes.number,\n  animate: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  contentInset: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number,\n  }),\n  gridMin: PropTypes.number,\n  gridMax: PropTypes.number,\n  valueAccessor: PropTypes.func,\n};\n\nStackedBarGrouped.defaultProps = {\n  spacingInner: 0.05,\n  spacingOuter: 0.05,\n  offset: shape.stackOffsetNone,\n  order: shape.stackOrderNone,\n  width: 100,\n  height: 100,\n  showZeroAxis: true,\n  contentInset: {},\n  numberOfTicks: 10,\n  showGrid: true,\n  valueAccessor: ({item, key}) => item[key],\n};\n\nexport default StackedBarGrouped;\n"]}